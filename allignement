import sys
import shutil
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QFileDialog, QLineEdit, QTabWidget, QTableWidget,
    QTableWidgetItem, QAbstractItemView, QHeaderView, QScrollBar
)
from PyQt5.QtCore import Qt, QItemSelection, QItemSelectionModel
from PyQt5.QtGui import QColor
import pandas as pd
import os
from pathlib import Path
import logging
from datetime import datetime
from PyQt5.QtWidgets import QInputDialog, QMessageBox

class ExcelAutomationTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Excel Semi-Automation Tool")
        self.setGeometry(100, 100, 1200, 700)  # Adjusted for laptop screens
        
        # Variables for managing files and selections
        self.input_folder = ""
        self.output_folder = ""
        self.excel_files = []
        self.current_file_index = 0
        self.current_df = None
        self.current_filename = ""
        self.selected_cells = []  # Stores (row, col) tuples
        self.column_headers = []
        self.history = []
        self.max_history = 50
        self.selection_start = None  # Track drag selection start
        self.last_edited_cell = None  # Track last edited/moved cell
        
        # Setup logging
        self.setup_logging()
        
        # Create UI
        self.create_widgets()

    def setup_logging(self):
        # Configure logging to save operations to a timestamped file
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        log_file = log_dir / f"excel_tool_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info("Excel Automation Tool started")

    def create_widgets(self):
        # Main widget and layout
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QVBoxLayout(main_widget)
        
        # Create tab widget
        self.tabs = QTabWidget()
        main_layout.addWidget(self.tabs)
        
        # Folder selection tab
        self.folder_page = QWidget()
        folder_layout = QVBoxLayout(self.folder_page)
        self.tabs.addTab(self.folder_page, "Folder Selection")
        
        # Folder selection widgets
        folder_widget = QWidget()
        folder_layout.addWidget(folder_widget)
        folder_inner_layout = QVBoxLayout(folder_widget)
        
        # Input folder
        input_layout = QHBoxLayout()
        input_label = QLabel("Input Folder:")
        self.input_folder_edit = QLineEdit()
        self.input_folder_edit.setReadOnly(True)
        input_browse = QPushButton("Browse")
        input_browse.clicked.connect(self.browse_input_folder)
        input_layout.addWidget(input_label)
        input_layout.addWidget(self.input_folder_edit)
        input_layout.addWidget(input_browse)
        folder_inner_layout.addLayout(input_layout)
        
        # Output folder
        output_layout = QHBoxLayout()
        output_label = QLabel("Output Folder:")
        self.output_folder_edit = QLineEdit()
        self.output_folder_edit.setReadOnly(True)
        output_browse = QPushButton("Browse")
        output_browse.clicked.connect(self.browse_output_folder)
        output_layout.addWidget(output_label)
        output_layout.addWidget(self.output_folder_edit)
        output_layout.addWidget(output_browse)
        folder_inner_layout.addLayout(output_layout)
        
        # Start processing button
        start_button = QPushButton("Start Processing")
        start_button.clicked.connect(self.start_processing)
        folder_inner_layout.addWidget(start_button)
        folder_inner_layout.addStretch()
        
        # Data view tab
        self.data_page = QWidget()
        data_layout = QVBoxLayout(self.data_page)
        self.tabs.addTab(self.data_page, "Data View")
        
        # Control panel
        control_widget = QWidget()
        control_layout = QHBoxLayout(control_widget)
        data_layout.addWidget(control_widget)
        
        # File info
        self.file_info_label = QLabel("No file loaded")
        control_layout.addWidget(self.file_info_label)
        
        # Movement buttons
        move_left_button = QPushButton("← Move Left")
        move_left_button.setShortcut("Ctrl+Left")
        move_left_button.setToolTip("Move selected cells left (Ctrl+Left)")
        move_left_button.clicked.connect(self.move_left)
        control_layout.addWidget(move_left_button)
        
        move_right_button = QPushButton("Move Right →")
        move_right_button.setShortcut("Ctrl+Right")
        move_right_button.setToolTip("Move selected cells right (Ctrl+Right)")
        move_right_button.clicked.connect(self.move_right)
        control_layout.addWidget(move_right_button)
        
        move_up_button = QPushButton("↑ Move Up")
        move_up_button.setShortcut("Ctrl+Up")
        move_up_button.setToolTip("Move selected cells up (Ctrl+Up)")
        move_up_button.clicked.connect(self.move_up)
        control_layout.addWidget(move_up_button)
        
        move_down_button = QPushButton("Move Down ↓")
        move_down_button.setShortcut("Ctrl+Down")
        move_down_button.setToolTip("Move selected cells down (Ctrl+Down)")
        move_down_button.clicked.connect(self.move_down)
        control_layout.addWidget(move_down_button)
        
        # Delete button
        delete_button = QPushButton("Delete")
        delete_button.setShortcut("Delete")
        delete_button.setToolTip("Delete selected cells, rows, or columns (Delete)")
        delete_button.clicked.connect(self.delete_selected)
        control_layout.addWidget(delete_button)
        
        # Undo button
        undo_button = QPushButton("Undo")
        undo_button.setShortcut("Ctrl+Z")
        undo_button.setToolTip("Undo last action (Ctrl+Z)")
        undo_button.clicked.connect(self.undo)
        control_layout.addWidget(undo_button)
        
        # Selection info
        self.selection_info_label = QLabel("Selection: None")
        control_layout.addWidget(self.selection_info_label)
        
        # Approve, manual, and generate buttons
        approve_button = QPushButton("Approve")
        approve_button.setShortcut("Ctrl+A")
        approve_button.setToolTip("Approve changes (Ctrl+A)")
        approve_button.clicked.connect(self.approve_changes)
        control_layout.addWidget(approve_button)
        
        manual_button = QPushButton("Manual")
        manual_button.setShortcut("Ctrl+M")
        manual_button.setToolTip("Save to manual folder (Ctrl+M)")
        manual_button.clicked.connect(self.save_manual)
        control_layout.addWidget(manual_button)
        
        generate_button = QPushButton("Generate Excel")
        generate_button.setShortcut("Ctrl+G")
        generate_button.setToolTip("Generate Excel file (Ctrl+G)")
        generate_button.clicked.connect(self.generate_excel)
        control_layout.addWidget(generate_button)
        
        # Status label
        self.status_label = QLabel("Select folders to begin")
        data_layout.addWidget(self.status_label)
        
        # Table widget for data display
        self.table = QTableWidget()
        self.table.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.table.setEditTriggers(QAbstractItemView.DoubleClicked)  # Enable in-place editing
        self.table.cellPressed.connect(self.on_cell_pressed)
        self.table.itemSelectionChanged.connect(self.on_selection_changed)
        self.table.itemChanged.connect(self.on_item_changed)
        self.table.horizontalHeader().setContextMenuPolicy(Qt.CustomContextMenu)
        self.table.horizontalHeader().customContextMenuRequested.connect(self.on_header_context_menu)
        self.table.horizontalHeader().sectionDoubleClicked.connect(self.on_header_double_click)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        self.table.horizontalScrollBar().setEnabled(True)
        data_layout.addWidget(self.table)
        
        # Initially disable controls
        self.toggle_controls(False)

    def browse_input_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Input Folder")
        if folder:
            self.input_folder = folder
            self.input_folder_edit.setText(folder)
            self.logger.info(f"Selected input folder: {folder}")

    def browse_output_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Output Folder")
        if folder:
            self.output_folder = folder
            self.output_folder_edit.setText(folder)
            self.logger.info(f"Selected output folder: {folder}")

    def start_processing(self):
        if not self.input_folder or not self.output_folder:
            QMessageBox.critical(self, "Error", "Please select both input and output folders")
            self.logger.error("Start processing failed: Input or output folder not selected")
            return
        
        self.excel_files = []
        completed_folder = Path(self.input_folder) / "original_input_completed"
        for ext in ['*.xlsx', '*.xls']:
            for file in Path(self.input_folder).glob(ext):
                if completed_folder not in file.parents:
                    self.excel_files.append(file)
        
        if not self.excel_files:
            QMessageBox.critical(self, "Error", "No Excel files found in the input folder")
            self.logger.error("No Excel files found in input folder")
            return
        
        self.current_file_index = 0
        self.history = []
        self.load_current_file()
        self.toggle_controls(True)
        self.tabs.setCurrentWidget(self.data_page)
        self.logger.info("Started processing Excel files")

    def load_current_file(self):
        if self.current_file_index >= len(self.excel_files):
            QMessageBox.information(self, "Complete", "All files have been processed!")
            self.toggle_controls(False)
            self.logger.info("All files processed")
            return
        
        current_file = self.excel_files[self.current_file_index]
        self.current_filename = current_file.name
        
        try:
            if self.current_df is not None:
                self.save_state()
            
            self.current_df = pd.read_excel(current_file)
            self.selected_cells = []  # Reset selection on file load
            self.selection_start = None
            self.last_edited_cell = None
            self.file_info_label.setText(f"File: {self.current_filename} ({self.current_file_index + 1}/{len(self.excel_files)})")
            self.status_label.setText("File loaded successfully")
            self.load_data_to_table()
            self.logger.info(f"Loaded file: {self.current_filename}")
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Could not load file {self.current_filename}: {str(e)}")
            self.logger.error(f"Failed to load file {self.current_filename}: {str(e)}")
            self.current_file_index += 1
            self.load_current_file()

    def save_state(self):
        if self.current_df is not None:
            state = {
                'df': self.current_df.copy(),
                'selected_cells': self.selected_cells.copy(),
                'file_index': self.current_file_index,
                'filename': self.current_filename,
                'last_edited_cell': self.last_edited_cell
            }
            self.history.append(state)
            if len(self.history) > self.max_history:
                self.history.pop(0)
            self.logger.info("Saved state for undo")

    def undo(self):
        if not self.history:
            self.status_label.setText("No actions to undo")
            self.logger.info("Undo attempted but no history available")
            return
        
        prev_state = self.history.pop()
        self.current_df = prev_state['df']
        self.selected_cells = prev_state['selected_cells']
        self.current_file_index = prev_state['file_index']
        self.current_filename = prev_state['filename']
        self.last_edited_cell = prev_state['last_edited_cell']
        
        self.file_info_label.setText(f"File: {self.current_filename} ({self.current_file_index + 1}/{len(self.excel_files)})")
        self.load_data_to_table()
        self.highlight_selected_cells()
        self.update_selection_display()
        if self.last_edited_cell:
            row, col = self.last_edited_cell
            self.table.setCurrentCell(row, col)
        self.status_label.setText("Undo successful")
        self.logger.info("Undo performed successfully")

    def load_data_to_table(self):
        self.table.blockSignals(True)  # Prevent signals during load
        self.table.clear()
        self.table.clearSelection()
        self.selected_cells = []
        self.selection_start = None  # Reset selection start
        
        if self.current_df is None or self.current_df.empty:
            self.logger.warning("No data to display in table")
            self.table.blockSignals(False)
            return
        
        self.column_headers = list(self.current_df.columns)
        self.table.setColumnCount(len(self.column_headers))
        self.table.setRowCount(len(self.current_df))
        self.table.setHorizontalHeaderLabels(self.column_headers)
        
        # Set column widths for scrolling
        for col in range(len(self.column_headers)):
            self.table.setColumnWidth(col, 200)
        
        # Populate table
        for row_idx, row in self.current_df.iterrows():
            for col_idx, value in enumerate(row):
                item = QTableWidgetItem(str(value) if pd.notna(value) else "")
                self.table.setItem(row_idx, col_idx, item)
        
        self.table.resizeColumnsToContents()
        self.update_selection_display()
        if self.last_edited_cell:
            row, col = self.last_edited_cell
            self.table.setCurrentCell(row, col)
        self.table.blockSignals(False)
        self.logger.info(f"Loaded data to table with {len(self.column_headers)} columns")

    def on_cell_pressed(self, row, col):
        self.selection_start = (row, col)
        self.logger.info(f"Cell pressed: ({row}, {col})")

    def on_selection_changed(self):
        modifiers = QApplication.keyboardModifiers()
        selected_items = self.table.selectedItems()
        new_selected_cells = [(item.row(), item.column()) for item in selected_items]
        
        if not modifiers & Qt.ControlModifier:
            # Mouse drag selection: restrict to same column as start
            if self.selection_start:
                start_row, start_col = self.selection_start
                new_selected_cells = [
                    (r, start_col) for r, c in new_selected_cells
                    if c == start_col and (r, start_col) not in self.selected_cells
                ]
            self.selected_cells = new_selected_cells
        else:
            # Ctrl-click for non-contiguous selection
            self.selected_cells = new_selected_cells
        
        # Force UI selection update
        self.table.blockSignals(True)
        self.table.clearSelection()
        selection = QItemSelection()
        for row, col in self.selected_cells:
            index = self.table.model().index(row, col)
            selection.select(index, index)
        self.table.selectionModel().select(selection, QItemSelectionModel.Select)
        self.table.blockSignals(False)
        
        self.save_state()
        self.highlight_selected_cells()
        self.update_selection_display()
        self.logger.info(f"Selection changed: {len(self.selected_cells)} cells selected: {self.selected_cells}")
        self.logger.debug(f"New selected cells: {new_selected_cells}")

    def on_item_changed(self, item):
        row = item.row()
        col = item.column()
        new_value = item.text()
        col_name = self.column_headers[col]
        old_value = str(self.current_df.loc[row, col_name]) if pd.notna(self.current_df.loc[row, col_name]) else ""
        
        if new_value != old_value:
            self.save_state()
            self.current_df.loc[row, col_name] = new_value
            self.last_edited_cell = (row, col)
            self.table.setCurrentCell(row, col)
            self.status_label.setText("Cell value updated")
            self.logger.info(f"Updated cell value in {col_name} at row {row} to '{new_value}'")

    def on_header_double_click(self, col):
        col_name = self.column_headers[col]
        new_name, ok = QInputDialog.getText(
            self, "Edit Column Header", "New header name:", text=col_name
        )
        if ok and new_name and new_name != col_name:
            self.save_state()
            self.current_df.rename(columns={col_name: new_name}, inplace=True)
            self.load_data_to_table()
            self.status_label.setText(f"Column '{col_name}' renamed to '{new_name}'")
            self.logger.info(f"Renamed column '{col_name}' to '{new_name}'")

    def on_header_context_menu(self, pos):
        header = self.table.horizontalHeader()
        col = header.logicalIndexAt(pos)
        col_name = self.column_headers[col]
        new_name, ok = QInputDialog.getText(
            self, "Edit Column Header", "New header name:", text=col_name
        )
        if ok and new_name and new_name != col_name:
            self.save_state()
            self.current_df.rename(columns={col_name: new_name}, inplace=True)
            self.load_data_to_table()
            self.status_label.setText(f"Column '{col_name}' renamed to '{new_name}'")
            self.logger.info(f"Renamed column '{col_name}' to '{new_name}'")

    def highlight_selected_cells(self):
        # Clear all highlights
        for row in range(self.table.rowCount()):
            for col in range(self.table.columnCount()):
                item = self.table.item(row, col)
                if item:
                    item.setBackground(QColor("white"))
        
        # Highlight selected cells
        for row, col in self.selected_cells:
            item = self.table.item(row, col)
            if item:
                item.setBackground(QColor("lightblue"))

    def update_selection_display(self):
        if not self.selected_cells:
            self.selection_info_label.setText("Selection: None")
        else:
            self.selection_info_label.setText(f"Selection: {len(self.selected_cells)} cells")

    def move_left(self):
        self.move_data(-1, horizontal=True)

    def move_right(self):
        self.move_data(1, horizontal=True)

    def move_up(self):
        self.move_data(-1, horizontal=False)

    def move_down(self):
        self.move_data(1, horizontal=False)

    def move_data(self, direction, horizontal=True):
        if not self.selected_cells:
            self.status_label.setText("Please select cells to move")
            self.logger.warning("Move attempted with no cells selected")
            return
        
        try:
            self.save_state()
            moves_made = 0
            updated_cells = []
            
            # Sort cells to avoid overwriting conflicts
            if horizontal:
                key = lambda x: (x[1], x[0])  # Sort by column, then row
            else:
                key = lambda x: (x[0], x[1])  # Sort by row, then column
            sorted_cells = sorted(self.selected_cells, key=key)
            
            if horizontal:
                for row, col in sorted_cells:
                    col_name = self.column_headers[col]
                    current_value = self.current_df.loc[row, col_name]
                    current_col_idx = col
                    target_col_idx = current_col_idx + direction
                    
                    if target_col_idx < 0 or target_col_idx >= len(self.current_df.columns):
                        continue
                    
                    target_col_name = self.current_df.columns[target_col_idx]
                    self.current_df.loc[row, col_name] = None
                    self.current_df.loc[row, target_col_name] = current_value
                    moves_made += 1
                    updated_cells.append((row, col + direction))
                    self.logger.info(f"Moved cell ({row}, {col_name}) to ({row}, {target_col_name})")
            else:
                for row, col in sorted_cells:
                    col_name = self.column_headers[col]
                    current_value = self.current_df.loc[row, col_name]
                    target_row = row + direction
                    
                    if target_row < 0 or target_row >= len(self.current_df):
                        continue
                    
                    self.current_df.loc[row, col_name] = None
                    self.current_df.loc[target_row, col_name] = current_value
                    moves_made += 1
                    updated_cells.append((target_row, col))
                    self.logger.info(f"Moved cell ({row}, {col_name}) to ({target_row}, {col_name})")
            
            self.selected_cells = updated_cells
            self.selection_start = None  # Reset to allow new column selection
            self.load_data_to_table()
            self.highlight_selected_cells()
            if updated_cells:
                self.last_edited_cell = updated_cells[0]  # Set focus to first moved cell
                row, col = self.last_edited_cell
                self.table.setCurrentCell(row, col)
                # Reselect moved cells
                self.table.blockSignals(True)
                self.table.clearSelection()
                selection = QItemSelection()
                for row, col in self.selected_cells:
                    index = self.table.model().index(row, col)
                    selection.select(index, index)
                self.table.selectionModel().select(selection, QItemSelectionModel.Select)
                self.table.blockSignals(False)
            direction_text = "left" if direction == -1 and horizontal else "right" if direction == 1 and horizontal else "up" if direction == -1 else "down"
            self.status_label.setText(f"Moved {moves_made} cells {direction_text}")
            self.logger.info(f"Moved {moves_made} cells {direction_text}")
            
        except Exception as e:
            self.status_label.setText(f"Error moving data: {str(e)}")
            self.logger.error(f"Error moving data: {str(e)}")

    def delete_selected(self):
        if not self.selected_cells:
            self.status_label.setText("Please select cells to delete")
            self.logger.warning("Delete attempted with no cells selected")
            return
        
        try:
            self.save_state()
            
            # Determine if entire rows or columns are selected
            selected_rows = set(row for row, col in self.selected_cells)
            selected_cols = set(col for row, col in self.selected_cells)
            all_rows = set(range(self.table.rowCount()))
            all_cols = set(range(self.table.columnCount()))
            
            # Check for full row selection
            rows_to_delete = []
            for row in selected_rows:
                if all((row, col) in self.selected_cells for col in all_cols):
                    rows_to_delete.append(row)
            
            # Check for full column selection
            cols_to_delete = []
            for col in selected_cols:
                if all((row, col) in self.selected_cells for row in all_rows):
                    cols_to_delete.append(self.column_headers[col])
            
            if rows_to_delete and len(rows_to_delete) == len(selected_rows):
                # Delete entire rows
                self.current_df.drop(index=rows_to_delete, inplace=True)
                self.current_df.reset_index(drop=True, inplace=True)
                self.status_label.setText(f"Deleted {len(rows_to_delete)} rows")
                self.logger.info(f"Deleted rows: {rows_to_delete}")
            elif cols_to_delete and len(cols_to_delete) == len(selected_cols):
                # Delete entire columns
                self.current_df.drop(columns=cols_to_delete, inplace=True)
                self.status_label.setText(f"Deleted {len(cols_to_delete)} columns")
                self.logger.info(f"Deleted columns: {cols_to_delete}")
            else:
                # Delete individual cells
                for row, col in self.selected_cells:
                    col_name = self.column_headers[col]
                    self.current_df.loc[row, col_name] = None
                    self.logger.info(f"Deleted cell ({row}, {col_name})")
                self.status_label.setText(f"Deleted {len(self.selected_cells)} cells")
            
            self.selected_cells = []
            self.last_edited_cell = None
            self.selection_start = None
            self.load_data_to_table()
            self.highlight_selected_cells()
            self.update_selection_display()
            
        except Exception as e:
            self.status_label.setText(f"Error deleting: {str(e)}")
            self.logger.error(f"Error deleting: {str(e)}")

    def approve_changes(self):
        if self.current_df is None:
            self.status_label.setText("No data to approve")
            self.logger.warning("Approve attempted with no data")
            return
        
        self.status_label.setText("Changes approved")
        self.logger.info("Changes approved")

    def save_manual(self):
        if self.current_df is None:
            self.status_label.setText("No data to save")
            self.logger.warning("Manual save attempted with no data")
            return
        
        try:
            # Log DataFrame state before saving
            self.logger.info(f"Saving manual Excel for {self.current_filename}. DataFrame shape: {self.current_df.shape}")
            self.logger.debug(f"DataFrame head:\n{self.current_df.head().to_string()}")
            
            # Validate DataFrame against table
            for row in range(self.table.rowCount()):
                for col in range(self.table.columnCount()):
                    table_item = self.table.item(row, col)
                    table_value = table_item.text() if table_item else ""
                    df_value = str(self.current_df.iloc[row, col]) if pd.notna(self.current_df.iloc[row, col]) else ""
                    if table_value != df_value:
                        self.logger.warning(f"Mismatch at ({row}, {self.column_headers[col]}): Table='{table_value}', DF='{df_value}'")
            
            manual_folder = os.path.join(self.output_folder, "manual")
            os.makedirs(manual_folder, exist_ok=True)
            output_filename = self.current_filename
            output_path = os.path.join(manual_folder, output_filename)
            
            # Save DataFrame to Excel
            self.current_df.to_excel(output_path, index=False, engine='openpyxl')
            
            # Verify file was created
            if os.path.exists(output_path):
                self.status_label.setText(f"Saved to manual: {output_filename}")
                self.logger.info(f"Saved manual output file: {output_path}")
            else:
                raise Exception("Manual output file was not created")
                
        except Exception as e:
            self.status_label.setText(f"Error saving manual Excel: {str(e)}")
            self.logger.error(f"Error saving manual Excel: {str(e)}")

    def generate_excel(self):
        if self.current_df is None:
            self.status_label.setText("No data to generate")
            self.logger.warning("Generate Excel attempted with no data")
            return
        
        try:
            # Log DataFrame state before saving
            self.logger.info(f"Generating Excel for {self.current_filename}. DataFrame shape: {self.current_df.shape}")
            self.logger.debug(f"DataFrame head:\n{self.current_df.head().to_string()}")
            
            # Validate DataFrame against table
            for row in range(self.table.rowCount()):
                for col in range(self.table.columnCount()):
                    table_item = self.table.item(row, col)
                    table_value = table_item.text() if table_item else ""
                    df_value = str(self.current_df.iloc[row, col]) if pd.notna(self.current_df.iloc[row, col]) else ""
                    if table_value != df_value:
                        self.logger.warning(f"Mismatch at ({row}, {self.column_headers[col]}): Table='{table_value}', DF='{df_value}'")
            
            output_filename = self.current_filename
            output_path = os.path.join(self.output_folder, output_filename)
            
            # Ensure output directory exists
            os.makedirs(self.output_folder, exist_ok=True)
            
            # Save DataFrame to Excel
            self.current_df.to_excel(output_path, index=False, engine='openpyxl')
            
            # Verify file was created
            if not os.path.exists(output_path):
                raise Exception("Output file was not created")
            
            # Move original input file to completed folder
            completed_folder = os.path.join(self.input_folder, "original_input_completed")
            os.makedirs(completed_folder, exist_ok=True)
            original_path = str(self.excel_files[self.current_file_index])
            completed_path = os.path.join(completed_folder, self.current_filename)
            shutil.move(original_path, completed_path)
            self.logger.info(f"Moved original file from {original_path} to {completed_path}")
            
            self.status_label.setText(f"Generated: {output_filename}")
            self.logger.info(f"Generated output file: {output_path}")
            
            self.current_file_index += 1
            self.load_current_file()
            
        except Exception as e:
            self.status_label.setText(f"Error generating Excel: {str(e)}")
            self.logger.error(f"Error generating Excel: {str(e)}")

    def toggle_controls(self, enabled):
        controls = [
            self.table,
            self.data_page.findChild(QPushButton, "← Move Left"),
            self.data_page.findChild(QPushButton, "Move Right →"),
            self.data_page.findChild(QPushButton, "↑ Move Up"),
            self.data_page.findChild(QPushButton, "Move Down ↓"),
            self.data_page.findChild(QPushButton, "Delete"),
            self.data_page.findChild(QPushButton, "Undo"),
            self.data_page.findChild(QPushButton, "Approve"),
            self.data_page.findChild(QPushButton, "Manual"),
            self.data_page.findChild(QPushButton, "Generate Excel")
        ]
        for control in controls:
            if control:
                control.setEnabled(enabled)
        self.status_label.setText("Ready to process files" if enabled else "Select folders to begin")
        self.logger.info(f"Controls toggled to {'enabled' if enabled else 'disabled'}")

def main():
    app = QApplication(sys.argv)
    window = ExcelAutomationTool()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
